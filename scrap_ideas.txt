
               -----------------------
               |        SCRAP        |
               -----------------------

Text commands to file manipulation and other tasks. 


Example:
	load "<filename.ext>" into text
	replace "string_1" with "string_2" in text
	
	load text
	replace first "string_1" with "string_2"
	
	foreach <var_name> in table[1]:
		remove r"<regular_expression"
		append "From, me"
		email from "from@email.com" to var_name

	write text to "<file_name.ext>"

	

--------------------------------------------------------------------------------------------------
|                    COMMAND                     |                     ACTION                    |
--------------------------------------------------------------------------------------------------
| write _ to _                                   | writes data to file                           |
--------------------------------------------------------------------------------------------------
| load _ into <var_name>                         | sets var_name to data from file               |
--------------------------------------------------------------------------------------------------
| load _                                         | sets primary var to file data                 |
--------------------------------------------------------------------------------------------------
| replace _ with _                               | replace every instance of first string with   |
|                                                | second                                        |
--------------------------------------------------------------------------------------------------
| replace _ _ with _                             | above with location modifier first, last, nth |
--------------------------------------------------------------------------------------------------
| append _ to _                                  | appends first to second                       |
--------------------------------------------------------------------------------------------------
| append _                                       | appends to primary                            |
--------------------------------------------------------------------------------------------------
| remove _ _                                     | remove second with option: every, first, etc  |
--------------------------------------------------------------------------------------------------




Program Layout
--------------

Order
-----
- head
- preproccessor
- compile

Py Files (.py)
--------------
- scrap_head   (head file, responsible for designating .scrap file and other -options)
- scrap_preprocessor    (runs any preprocessing necessary for the file)
- scrap_compile   (splits script and returns list of expression)

- scrap_expression   (expression base class; contains execute method for that expression) 
- scrap_expressions   (contains a list of expressions)

- scrap_variable   (variable base class; name, data, type)
- scrap_variable_manager  (maintains a list of Variable objects)

- scrap_error.py	(standard error and warning functions)
- scrap_utilities	(utility methods that are used many times across several files)

Scrap Files (.scrap)
--------------------
script    (initial test scrap file)
test_script



More Examples:

----- rename_file.scrap ------
	rename "old_file.file" to "new_file.file"

----- remove_word.scrap ------
	load "file.txt" into text_file
	replace "word" with "" in text_file
	# or
	remove "word" in text_file

------ print_variable.scrap ------
	load "file.txt" into text_file
	show text_file

------ rename_list_of_files.scrap -------
	set files to ["file_1.file", "file_2.file", "file_3.file"]
	foreach file in files enumerate i
		rename file to "new_file\[i]"
	
------ if_statement.scrap  --------
	load "file.txt" into text_file
	if text_file contains "blue"
		remove "red" in text_file
	write text_file to "file.txt"






	


File Properties
---------------

- scrap_expressions.py
	- VARS
	   expression_list   [list of expressions]
	- METHODS
	   get_expression(key)    [returns the expression with the given key]
- scrap_expression.py
	- Expression (CLASS)
		- VARS
		   key     [name of expression; string]
		   func    [function called when expression occurs]
		- METHODS
		   exec(args)    [calls func and passes args]
- scrap_utilities.py
	- METHODS
	   is_string(string)    [determines if the string is wrapped in quotations]
	   is_regex(string)	[True if string is of the form r"..."]
	   kill(message)	[kills the progrom with error message]
	   write_to_file(filename, content, append=False, line_number=-1)	[writes content to filename; prints error and kills if IOError]
	   read_from_file(filename, line_number=-1)	[returns the contents of filename; prints error and kills if IOError]
	   read_string_from_variable(var)	[returns string from STRING type, file contents from FILE, number as string from NUMERIC]
	   write_string_to_variable(var, string)	[opposite of read_string_from_variable]
- scrap_compile.py
	- Compile (CLASS)
		- VARS
		   source   [entire source string]
		   lines    [source string split by \n]
		- METHODS
		   compile(source)   [executes each line in source]
		   execute(source)   [execute takes a single expression line and executes it
- scrap_error.py
	- bcolors (CLASS)
		- VARS
		   HEADER, OKBLUE, OKGREEN, WARNING, FAIL, ENDC, BOLD, UNDERLINE     [terminal print codes]
	- METHODS
	   print_error(name, message, line_number)     [prints default format error message in red]
	   print_warning(name, message, line_number)   [prints default format warning message in yellow]
	   print_heading(title)                        [prints heading format in blue, bold, and underlined]
	   print_OK(text, checked)                     [prints text in green with checkmark at beginning if checked is True]
- scrap_variable.py
	- Type (ENUM)		[Enum containing possible variable types]
	   STRING (1)
	   NUMERIC (2)
	   FILE (3)
	   REGEX (4)
	   LIST (5) 
	- Variable (CLASS)
		- VARS
		   name		[variable name; expected string]
		   data		[data of variable; expected to align with type_t]
		   type_t	[type; expected Type (Enum)]
		- METHODS
		   set_name(name)	[sets name]
		   set_data(data)	[sets data]
		   set_type_t(type_t)	[sets type]
		   set_all(name, data, typte_t)	[resets all properties]
- scrap_variable_manager.py
	- VariableManager (CLASS)
		- VARS
		   vars		[list of variables
		- METHODS
		   contains_name(name)		[returns true if there is a variable with the given name]
		   set(variable)		[adds the variable to the list of variables; if variable already exists, then overwrite it]
		   remove(name)			[removes the variable with the given name]
		   get_variable(name)		[returns the variable with the given name]
- scrap_preprocessor.py
	- Preprocessor (CLASS)
		- VARS
		   source		[source code from script to process]
		- METHODS
		   process(optimized)		[if optimized is True then it changes the code to optimize certain things]
		   _swap_block(source)		[changes blocks (colon followed by tabs) to block (colon followed by {; ... ; ... ;})]
		   _remove_empty_lines(out)	[removes empty lines from input source] 






TODO:
-----
- implement basic commands
x ~~ pass line number through ~~
x ~~ exit compilation on error ~~
- clean-up block semi-colons
x ~~ find place for variable manager ~~
- document all methods and classes
- add string quote escape support 
x ~~ color error and warning messages ~~
- enforce case sensitivity
x ~~ add regex and list variable type ~~
- create Block class to store blocks
x ~~ create read and write file methods ~~
- handle file types w/ Enum
- basic syntax check in preprocessor (valid keys, variables, char-set, etc.)
- evaluate conditionals method
- write more test cases and example code












